
//please save the current selection
//before calling this procedure
//and restore the selection after this procedure 


//This mel script outputs 
//the selected geometry and texture map,
//inthe form of part of a rib file.
//You can copy and paste this part in the original rib file
//exported by the ribexporter plugin shipped
//along with Maya unlimited 4.5

//this is entirely mine


proc int [] vertexFromFaces(string $obj, int $i) {
		string $res1[]; 
		string $res2[];
		int $val[];
		string $buffer[];
		$obj = kgGetMeshObject($obj);
		if($obj == "") {			
			warning("\nobject " + $obj + "not a mesh");
			return $val;
		}
		$code = "polyListComponentConversion -ff -bo -tv " + $obj + ".f[" + $i + "]";		
		$sa = eval($code);		
		string $s = "\n face " + $i + " is:";
		int $j;
		for($j =0 ; $j < size($sa) ; ++$j) {
			
			$code = "filterExpand -ex true -sm 31 " + $sa[$j];			
			$res2 = eval($code);
			int $k;
			for($k=0 ; $k < size($res2) ; ++$k){
				$s = $s + " " + $res2[$k];
			}
			appendStringArray($res1, $res2, size($res2));
		}
		int $numTokens;
		for($j=0; $j < size($res1); ++$j) {
			$numTokens = `tokenize $res1[$j] "."	$buffer`;		
			if($numTokens != 2){
				error ("\nundesired input " + $res1[$i]);
				return $val;
			}
			$s = $buffer[1];
			$numTokens = `tokenize $s "[" $buffer`;
			if($numTokens != 2){
				error ("\nundesired input " + $s);
			}
			$s = $buffer[1];
			$numTokens = `tokenize $s "]" $buffer`;
			if($numTokens != 1){
				error ("\nundesired input " + $s);
			}
			$val[size($val)] = $buffer[0];			
		}
		return $val;
}



global proc outputPointAndUVs(){

string $obj;
string $code;
string $sa[];

string $sl[] = `ls -sl`;
if(size($sl) <= 0 ) {
	error("\n no object selected ");
	return;
	
}

for ( $obj in $sl ) {
	$obj = kgGetMeshObject($obj);
	if($obj == "") {
		warning("\nobject " + $obj + "not a mesh");
		continue;
	}	
	int $nVert[] = `polyEvaluate -v $obj`;
	int $nTri[] = `polyEvaluate -t $obj`; 
	int $nv = $nVert[0];
	if($nVert[0] == 0){
		warn ("\nselected object not a polygon object");
		continue;
	}
	int $nFace[] = `polyEvaluate -f $obj`;
	int $nUV[] =  `polyEvaluate -uv $obj`;
	
	print ("\nnVert = " + $nVert[0] + "  nFace = " + $nFace[0] + " nUV = " + $nUV[0]);

	int $i;
	

	//int $nvm1 = $nv - 1;
	print "\n[\n";
	for($i =0; $i < $nFace[0]; ++$i)
	{
		//if($i > 0) print ",";
		print " 1";
		if($i % 10 == 0 && $i > 0) {
			print "\n";
		}
	}


	print "\n]\n[\n";
	

	int $ia[];
	int $sum =0;
	for($i=0; $i < $nFace[0]; ++$i) 
	{		
		$ia = vertexFromFaces($obj, $i);
		int $ig = size($ia);
		//if ($i > 0) print ",";
		print (" " + $ig);
		if ($i % 10 == 0 && $i > 0) {
			print "\n";
		}
		$sum += $ig;		
	}
	print "\n]\n[\n";
	for($i=0,$j=0; $i < $nFace[0]; ++$i) 
	{		
		$ia = vertexFromFaces($obj, $i);
		int $ig = size($ia);
		int $k;
		for($k =0; $k < $ig ; ++$k) {
		//	if ($j > 0) print ",";	
			print (" " + $ia[$k]);
			if ($j % 10 == 0 && $j > 0) {
				print "\n";
			}
			$j += 1;
		}					
		
	}
	print "\n]\n\"P\" [\n";
	float $actpos[];
	for ($i=0; $i < $nv; $i++) {
		$actpos = eval("pointPosition -w " + $obj + ".vtx[" + $i + "]");
		if ($i > 0) print " ";
		print ($actpos[0] + " " + $actpos[1] + " " + $actpos[2]);
		print "\n";
		
	}
	print "\n]\n\"st\"\n[\n";
	for ($i=0; $i < $nv; $i++) {
		$code = "polyListComponentConversion -fv -tuv " + $obj + ".vtx[" + $i+"]";
		//print $code;
		string $psa[] = eval($code);
		//print ($psa);	
		$code = "polyEditUV -q " + $psa[0];
		//print $code;
		float $u[] = eval($code);
		if ($i > 0) print " ";
		print ($u[0] + " " + $u[1]);
		if(($i % 2 == 0) && $i > 0) print "\n";
	}
	print "\n]\n";
}

select -r $sl;
}
